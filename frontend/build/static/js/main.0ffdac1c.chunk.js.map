{"version":3,"sources":["components/AnimalDisplay.js","client.js","store/dialogue.js","store/inventory.js","lib/async-typer.js","lib/extractCurrentDialogueObj.js","components/TextBox.js","components/Nav.js","components/ResponseBox.js","components/Inventory.js","pages/Testimony.js","store/conversations.js","pages/SelectConversation.js","store/store.js","App.js","serviceWorker.js","index.js","imgs/normal.png","imgs/mad.png","imgs/laugh.png","imgs/sad.png","imgs/sleep.png"],"names":["AnimalDisplay","emotion","animalImages","normal","mad","laugh","sad","sleep","className","src","alt","sanityClient","projectId","dataset","useCdn","initialState","currentDialoguePosition","currentDialogueName","currentDialogueID","dialogue","name","phrase","text","speaker","responseBoxIsOpen","dialogueFromSanity","isInventoryOpen","nextDialogue","createAction","prevDialogue","resetDialoguePosition","toggleResponseBox","toggleInventory","switchConversation","getDialogue","createAsyncThunk","conversationID","a","fetch","response","dialogueReducer","state","action","type","payload","toString","items","img","description","notes","getInventoryItems","getAnimalNotes","addToInventory","inventoryReducer","wait","ms","Promise","resolve","setTimeout","getRandomBetween","min","max","randomNumber","Math","random","floor","draw","el","console","log","innerHTML","showField","querySelector","hideField","hideText","showText","letter","slice","textContent","typeMin","typeMax","amountOfTimeToWait","document","querySelectorAll","forEach","button","addEventListener","extractCurrentDialogueObj","dialogueList","find","_id","connect","dispatch","bindActionCreators","props","textRef","useRef","history","useHistory","useSelector","currentDialogueObj","phrases","responseOptions","useEffect","textEl","current","ref","onClick","isEndOfDialogue","length","needEvidence","isFinalDialogue","push","Nav","href","StyledResponseBox","styled","div","ResponseBox","useDispatch","map","optionObj","followingDialogueID","followingDialogue","renderResponseOptions","StyledInventory","dummyInventory","image","dummyAnimalNotes","imageUrl","StyledItemDetailsDisplay","ItemDetailsDisplay","selectedItem","inventory","setIsDetailsOpen","requiredEvidence","nextResponseID","itemObj","item","closeDetailsDisplay","Inventory","useState","isDetailsOpen","setSelectedItem","isShowingPeople","setIsShowingPeople","setItems","fullItemsInventory","store","animalNotes","displayItemDetails","e","itemName","currentTarget","selectUserItemsFromFullInventory","userItemsInventory","JSON","parse","window","localStorage","getItem","filter","includes","jsx","key","data-name","renderInventory","Testimony","match","params","id","setItem","stringify","act","conversations","getConversations","conversationsReducer","SelectConversation","to","convo","reducer","combineReducers","configureStore","App","path","render","Boolean","location","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.0ffdac1c.chunk.js","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport normal from '../imgs/normal.png';\nimport mad from '../imgs/mad.png';\nimport laugh from '../imgs/laugh.png';\nimport sad from '../imgs/sad.png';\nimport sleep from '../imgs/sleep.png';\n\nconst AnimalDisplay = () => {\n  let emotion = 'normal';\n  // useSelector(\n  //   (state) => state.dialogue[state.currentDialoguePosition][1]\n  // );\n\n  const animalImages = {\n    normal,\n    mad,\n    laugh,\n    sad,\n    sleep,\n  };\n\n  if (!animalImages[emotion]) emotion = 'normal';\n\n  return (\n    <div className=\"game_container__animal\">\n      <img\n        src={animalImages[emotion]}\n        alt=\"\"\n        className=\"game_container__animal_image\"\n      />\n    </div>\n  );\n};\n\nexport default AnimalDisplay;\n","import sanityClient from '@sanity/client';\n\nexport default sanityClient({\n  projectId: 'qvonp967', // find this at manage.sanity.io or in your sanity.json\n  dataset: 'production', // this is from those question during 'sanity init'\n  useCdn: true,\n});\n","import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport sanityClient from '../client';\n\nconst initialState = {\n  currentDialoguePosition: 0,\n  currentDialogueName: 'Start',\n  currentDialogueID: null,\n  dialogue: [\n    {\n      name: 'Start',\n      phrase: [\n        {\n          emotion: 'normal',\n          text: '',\n          speaker: '',\n        },\n      ],\n    },\n  ],\n  responseBoxIsOpen: false,\n  dialogueFromSanity: 'apples',\n  isInventoryOpen: false,\n};\n\n// Actions\nexport const nextDialogue = createAction('NEXT_DIALOGUE');\nexport const prevDialogue = createAction('PREV_DIALOGUE');\nexport const resetDialoguePosition = createAction('RESET_DIALOUGE_POSITION');\nexport const toggleResponseBox = createAction('TOGGLE_RESPONSE_BOX');\nexport const toggleInventory = createAction('TOGGLE_INVENTORY');\nexport const switchConversation = createAction('SWITCH_CONVERSATION');\n\nexport const getDialogue = createAsyncThunk(\n  'GET_DIALOGUE',\n  async (conversationID) => {\n    const response = await sanityClient.fetch(\n      `*[_type == \"dialogue\" && conversation._ref == \"${conversationID}\"]{\n        name, responseOptions, needEvidence, _id, isFinalDialogue, requiredEvidence->{name},\n  \t\t\t\"phrase\": phrase[]{\n  \t\t\t\temotion->{emotion}, speaker->{name}, text\t\n\t\t\t\t},\n\t\t\t\t\"responseOptions\": responseOptions[]{\n          text, \n\t\t\t\t\tfollowingDialogue->{_id}\n        }\n      }`\n    );\n    return response;\n  }\n);\n\n// Reducer\n\nfunction dialogueReducer(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case nextDialogue.toString():\n      return {\n        ...state,\n        currentDialoguePosition: state.currentDialoguePosition + 1,\n      };\n    case prevDialogue.toString():\n      return {\n        ...state,\n        currentDialoguePosition: state.currentDialoguePosition - 1,\n      };\n    case resetDialoguePosition.toString():\n      return {\n        ...state,\n        currentDialoguePosition: 0,\n      };\n    case 'GET_DIALOGUE/fulfilled':\n      return {\n        ...state,\n        dialogue: payload,\n      };\n    case toggleResponseBox.toString():\n      return {\n        ...state,\n        responseBoxIsOpen: !state.responseBoxIsOpen,\n      };\n    case toggleInventory.toString():\n      return {\n        ...state,\n        isInventoryOpen: !state.isInventoryOpen,\n      };\n    case switchConversation.toString():\n      return {\n        ...state,\n        currentDialogueID: payload,\n        currentDialoguePosition: 0,\n        responseBoxIsOpen: false,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default dialogueReducer;\n","import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport sanityClient from '../client';\n\nconst initialState = {\n  items: [\n    {\n      name: 'Statue',\n      img: 'url.jpg',\n      description: 'Little bust of the thinking guy. 🤔',\n    },\n  ],\n  notes: [\n    {\n      name: 'Katt',\n      img: 'url.jpg',\n      description: 'QT',\n    },\n  ],\n};\n\n// Actions\nexport const getInventoryItems = createAsyncThunk(\n  'GET_INVENTORY_ITEMS',\n  // TODO Refactor me to grab all items and animal notes\n  async () => {\n    const response = await sanityClient.fetch(\n      `*[_type == \"item\"]{\n        name, description, \n        \"imageUrl\": image.asset->url\n \n}`\n    );\n    return response;\n  }\n);\n\nexport const getAnimalNotes = createAsyncThunk('GET_ANIMAL_NOTES', async () => {\n  const response = await sanityClient.fetch(\n    `*[_type == \"animalNotes\"]{\n        name, description, \n        \"imageUrl\": image.asset->url\n \n}`\n  );\n  return response;\n});\n\nexport const addToInventory = createAction('ADD_TO_INVENTORY');\n\n// Reducer\n\nfunction inventoryReducer(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case 'GET_INVENTORY_ITEMS/fulfilled':\n      return { ...state, items: payload };\n    case 'GET_ANIMAL_NOTES/fulfilled':\n      return { ...state, notes: payload };\n    case addToInventory.toString():\n      return { ...state, payload };\n    default:\n      return state;\n  }\n}\n\nexport default inventoryReducer;\n","function wait(ms = 0) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nfunction getRandomBetween(min = 10, max = 25, randomNumber = Math.random()) {\n  return Math.floor(randomNumber * (max - min) + min);\n}\n\nasync function draw(el, text) {\n  console.log('Drawing!');\n  // const text = el.dataset.text;\n  const html = `\n    <span class=\"show\"></span><span class=\"hide\" style=\"color: rgba(0,0,0,0);\"></span>`;\n  el.innerHTML = html;\n  const showField = el.querySelector('.show');\n  const hideField = el.querySelector('.hide');\n  console.log(showField);\n  let hideText = text;\n  let showText = '';\n  for (const letter of text) {\n    showText += letter;\n    hideText = hideText.slice(1);\n    showField.textContent = showText;\n    hideField.textContent = hideText;\n    const { typeMin, typeMax } = el.dataset;\n    const amountOfTimeToWait = getRandomBetween(typeMin, typeMax);\n    await wait(amountOfTimeToWait);\n  }\n}\n\n// async for of loop\n// async function draw(el) {\n//   const text = el.textContent;\n//   let soFar = '';\n//   for (const letter of text) {\n//     soFar += letter;\n//     el.textContent = soFar;\n//     // wait for some amount of time\n//   }\n// }\n\nconst text = document.querySelector('.text_box__text');\nconst buttons = document.querySelectorAll('button');\nbuttons.forEach((button) => {\n  button.addEventListener('click', () => draw(text));\n});\n\nexport default draw;\n","const extractCurrentDialogueObj = (currentDialogueID, dialogueList) => {\n  let currentDialogueObj;\n\n  if (!currentDialogueID) {\n    currentDialogueObj = dialogueList.find(\n      (dialogue) => dialogue.name === 'Start'\n    );\n  } else {\n    currentDialogueObj = dialogueList.find(\n      (dialogue) => dialogue._id === currentDialogueID\n    );\n  }\n\n  return currentDialogueObj;\n};\n\nexport default extractCurrentDialogueObj;\n","import React, { useRef, useEffect } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  nextDialogue,\n  prevDialogue,\n  toggleResponseBox,\n  toggleInventory,\n} from '../store/dialogue';\nimport draw from '../lib/async-typer';\nimport extractCurrentDialogueObj from '../lib/extractCurrentDialogueObj';\n\nconst TextBox = (props) => {\n  const textRef = useRef(null);\n  const history = useHistory();\n  const {\n    dialogue,\n    currentDialoguePosition,\n    currentDialogueName,\n    currentDialogueID,\n  } = useSelector((state) => state.dialogue);\n\n  let currentDialogueObj = extractCurrentDialogueObj(\n    currentDialogueID,\n    dialogue\n  );\n\n  const phrases = currentDialogueObj && currentDialogueObj.phrase;\n  const responseOptions = currentDialogueObj\n    ? currentDialogueObj.responseOptions\n    : null;\n\n  // On change effect\n  useEffect(() => {\n    const textEl = textRef.current;\n    const speaker = phrases[currentDialoguePosition].speaker.name;\n    const text = phrases[currentDialoguePosition].text;\n    draw(textEl, `${speaker}: ${text}`);\n  }, [\n    dialogue,\n    currentDialoguePosition,\n    currentDialogueName,\n    currentDialogueID,\n  ]);\n\n  const handleNextClick = () => {\n    const isEndOfDialogue =\n      currentDialoguePosition === currentDialogueObj.phrase.length - 1;\n\n    if (isEndOfDialogue && currentDialogueObj.needEvidence) {\n      props.toggleInventory();\n    } else if (isEndOfDialogue && currentDialogueObj.isFinalDialogue) {\n      history.push('/');\n    } else if (isEndOfDialogue) {\n      props.toggleResponseBox();\n    } else {\n      props.nextDialogue();\n    }\n  };\n\n  const handlePrevClick = () => {\n    if (currentDialoguePosition === 0) {\n      console.log('stopping');\n    } else {\n      props.prevDialogue();\n    }\n  };\n\n  return (\n    <div className=\"text_box\">\n      <div className=\"text_box__name\">Gato</div>\n      <div className=\"text_box__main\">\n        <p className=\"text_box__text\" ref={textRef}></p>\n        <button className=\"text_box__left_arrow\" onClick={handlePrevClick}>\n          Back\n        </button>\n        <button className=\"text_box__right_arrow\" onClick={handleNextClick}>\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// function mapStateToProps(state) {\n//   const { dialogue, currentDialoguePosition } = state;\n//   return { dialogue, currentDialoguePosition };\n// }\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    { nextDialogue, prevDialogue, toggleResponseBox, toggleInventory },\n    dispatch\n  );\n}\n\nexport default connect(null, mapDispatchToProps)(TextBox);\n","import React from 'react';\n\nconst Nav = () => {\n  return (\n    <nav>\n      <a href=\"#\">Animal Crossing</a>\n      <a href=\"#\">Jenn's Site</a>\n      <a href=\"#\">Chris's Site</a>\n      <a href=\"#\">Your Site</a>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { switchConversation } from '../store/dialogue';\n\nconst StyledResponseBox = styled.div`\n  width: 200px;\n  background-color: #fff;\n  border: 1px solid green;\n  position: absolute;\n  right: 1rem;\n  bottom: 170px;\n  z-index: 2;\n  border-radius: 20px;\n  padding: 1rem;\n\n  &.hide {\n    display: none;\n  }\n  ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n  }\n\n  li {\n    padding: 0.3rem 0;\n  }\n`;\n\nconst ResponseBox = () => {\n  const { responseBoxIsOpen, currentDialogueName, dialogue } = useSelector(\n    (state) => state.dialogue\n  );\n  const dispatch = useDispatch();\n\n  function renderResponseOptions() {\n    const currentDialogue = dialogue.find(\n      (phrases) => phrases.name === currentDialogueName\n    );\n    const { responseOptions } = currentDialogue;\n    if (!responseOptions) return;\n    console.log(responseOptions);\n\n    return responseOptions.map((optionObj) => (\n      <li onClick={() => handleClick(optionObj.followingDialogue._id)}>\n        {optionObj.text}\n      </li>\n    ));\n  }\n\n  function handleClick(followingDialogueID) {\n    console.log(followingDialogueID);\n    dispatch(switchConversation(followingDialogueID));\n  }\n\n  return (\n    <StyledResponseBox className={responseBoxIsOpen ? '' : 'hide'}>\n      <ul>{renderResponseOptions()}</ul>\n    </StyledResponseBox>\n  );\n};\n\nexport default ResponseBox;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { toggleInventory, switchConversation } from '../store/dialogue';\nimport extractCurrentDialogueObj from '../lib/extractCurrentDialogueObj';\n\nconst StyledInventory = styled.div`\n  position: absolute;\n  width: calc(100% - 4rem);\n  height: 350px;\n  z-index: 6;\n  border: 1px solid black;\n  padding: 1rem;\n  background-color: palegoldenrod;\n  border-radius: 5px;\n\n  .inventory_header {\n    width: 100%;\n    border: 1px solid black;\n  }\n\n  .inventory_grid {\n    display: grid;\n    grid-template-rows: repeat(2, 1fr);\n    grid-template-columns: repeat(4, 1fr);\n    grid-gap: 1rem;\n    height: calc(100% - 2rem);\n    width: 100%;\n  }\n\n  div {\n    border: 1px solid black;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0.4rem 0;\n    background-color: #fff;\n  }\n\n  img {\n    width: 80px;\n    height: 80px;\n  }\n\n  span {\n    display: block;\n    flex: 1;\n  }\n`;\n\nconst dummyInventory = [\n  {\n    name: 'horse',\n    image: 'https://f4.bcbits.com/img/a3261223391_2.jpg',\n    description: 'What a noble steed.',\n  },\n  {\n    name: 'john',\n    image: 'https://f4.bcbits.com/img/a3261223391_2.jpg',\n    description: 'What a noble steed.',\n  },\n  {\n    name: 'The Prophecy',\n    image: 'https://f4.bcbits.com/img/a3261223391_2.jpg',\n    description: 'What a noble steed.',\n  },\n];\n\nconst dummyAnimalNotes = [\n  {\n    name: 'Brian',\n    imageUrl: 'https://f4.bcbits.com/img/a0905339103_16.jpg',\n    description: 'What a noble steed.',\n  },\n  {\n    name: 'John',\n    imageUrl: 'https://f4.bcbits.com/img/a0905339103_16.jpg',\n    description: 'What a noble steed.',\n  },\n  {\n    name: 'Lucy',\n    imageUrl: 'https://f4.bcbits.com/img/a0905339103_16.jpg',\n    description: 'What a noble steed.',\n  },\n];\n\nconst Inventory = () => {\n  const [isDetailsOpen, setIsDetailsOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState('');\n  const [isShowingPeople, setIsShowingPeople] = useState(false);\n  const [items, setItems] = useState(dummyInventory);\n  const { currentDialogueID, dialogue } = useSelector(\n    (state) => state.dialogue\n  );\n  const fullItemsInventory = useSelector((store) => store.inventory.items);\n  const animalNotes = useSelector((store) => store.inventory.notes);\n  const currentDialogueObj = extractCurrentDialogueObj(\n    currentDialogueID,\n    dialogue\n  );\n\n  const requiredEvidence = currentDialogueObj.requiredEvidence.name;\n  const nextResponseID =\n    currentDialogueObj.responseOptions[0].followingDialogue._id;\n\n  function displayItemDetails(e) {\n    const itemName = e.currentTarget.dataset.name;\n    console.log(e.currentTarget.dataset.name);\n    setSelectedItem(itemName);\n    setIsDetailsOpen(true);\n  }\n\n  function toggleShowingPeople() {\n    setItems(!isShowingPeople ? dummyAnimalNotes : dummyInventory);\n    setIsShowingPeople(!isShowingPeople);\n  }\n\n  function selectUserItemsFromFullInventory() {\n    const userItemsInventory = JSON.parse(\n      window.localStorage.getItem('itemsInInventory')\n    ).items;\n    console.log('fullItemsInventory', fullItemsInventory);\n    console.log('userItemsInventory', userItemsInventory);\n    return fullItemsInventory.filter((item) => {\n      return userItemsInventory.includes(item.name);\n    });\n  }\n\n  function renderInventory() {\n    const selectedItems = isShowingPeople\n      ? animalNotes\n      : selectUserItemsFromFullInventory();\n    const jsx = selectedItems.map((item) => {\n      // TODO Add sanity image url builder to import a smaller image size\n      return (\n        <div key={item.name} data-name={item.name} onClick={displayItemDetails}>\n          <img src={item.imageUrl} alt=\"\" />\n          <span>{item.name}</span>\n        </div>\n      );\n    });\n\n    console.log(jsx);\n    return jsx;\n  }\n  return (\n    <>\n      {isDetailsOpen ? (\n        <ItemDetailsDisplay\n          selectedItem={selectedItem}\n          inventory={\n            isShowingPeople ? animalNotes : selectUserItemsFromFullInventory()\n          }\n          setIsDetailsOpen={setIsDetailsOpen}\n          requiredEvidence={requiredEvidence}\n          nextResponseID={nextResponseID}\n        />\n      ) : (\n        <StyledInventory>\n          <div className=\"inventory_header\">\n            <button onClick={toggleShowingPeople}>\n              {isShowingPeople ? 'Items' : 'Animals'}\n            </button>\n          </div>\n          <div className=\"inventory_grid\">{renderInventory()}</div>\n        </StyledInventory>\n      )}\n    </>\n  );\n};\n\nconst StyledItemDetailsDisplay = styled.div`\n  position: absolute;\n  width: calc(100% - 4rem);\n  height: 50%;\n  z-index: 6;\n  border: 1px solid black;\n  display: grid;\n  grid-gap: 1rem;\n  padding: 1rem;\n  grid-template-columns: 200px 1fr;\n  background-color: palegoldenrod;\n  border-radius: 5px;\n\n  img {\n    width: 200px;\n    height: 200px;\n  }\n\n  h4 {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nconst ItemDetailsDisplay = ({\n  selectedItem,\n  inventory,\n  setIsDetailsOpen,\n  requiredEvidence,\n  nextResponseID,\n}) => {\n  const itemObj = inventory.find((item) => item.name === selectedItem);\n  const dispatch = useDispatch();\n\n  function closeDetailsDisplay() {\n    setIsDetailsOpen(false);\n  }\n\n  function presentItem() {\n    console.log(itemObj);\n    if (itemObj.name === requiredEvidence) {\n      dispatch(switchConversation(nextResponseID));\n      closeDetailsDisplay();\n      dispatch(toggleInventory());\n    } else {\n      console.log('Soooorrry, wrong one');\n      closeDetailsDisplay();\n    }\n  }\n\n  return (\n    <StyledItemDetailsDisplay>\n      <img src={itemObj.imageUrl} alt=\"\" />\n      <div className=\"written_details\">\n        <h4>{itemObj.name}</h4>\n        <p>{itemObj.description}</p>\n        <button onClick={presentItem}>Present</button>\n        <button onClick={closeDetailsDisplay}>Close</button>\n      </div>\n    </StyledItemDetailsDisplay>\n  );\n};\n\nexport default Inventory;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AnimalDisplay from '../components/AnimalDisplay';\nimport { getDialogue, resetDialoguePosition } from '../store/dialogue';\nimport { getInventoryItems, getAnimalNotes } from '../store/inventory';\nimport TextBox from '../components/TextBox';\nimport Nav from '../components/Nav';\nimport ResponseBox from '../components/ResponseBox';\nimport Inventory from '../components/Inventory';\nimport '../styles/testimony.css';\n\nconst Testimony = (props) => {\n  // TODO Add to Sanity boolean isFinalDialogue that will send user back to homepage when conversation ends\n\n  const dispatch = useDispatch();\n  const isInventoryOpen = useSelector(\n    (state) => state.dialogue.isInventoryOpen\n  );\n\n  useEffect(() => {\n    dispatch(getDialogue(props.match.params.id));\n    // set place to 0\n    dispatch(resetDialoguePosition());\n  }, []);\n\n  // Get items for inventory & Animal notes\n  useEffect(() => {\n    dispatch(getInventoryItems());\n    dispatch(getAnimalNotes());\n  }, []);\n\n  // on load, set local storage\n  useEffect(() => {\n    const { localStorage } = window;\n    const itemsInInventory = {\n      items: ['The Prophecy'],\n      act: 2,\n    };\n    localStorage.setItem('itemsInInventory', JSON.stringify(itemsInInventory));\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <Nav />\n      <div className=\"game_container\">\n        <AnimalDisplay />\n        {isInventoryOpen ? <Inventory /> : ''}\n        <ResponseBox />\n        <TextBox />\n      </div>\n    </div>\n  );\n};\n\nexport default Testimony;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport sanityClient from '../client';\n\nconst initialState = {\n  conversations: 'none',\n};\n\n// Actions\nexport const getConversations = createAsyncThunk(\n  'GET_CONVERSATIONS',\n  async () => {\n    const response = await sanityClient.fetch(\n      `*[_type == \"conversation\"]{\n              name, _id\n      }`\n    );\n    return response;\n  }\n);\n\n// Reducer\n\nfunction conversationsReducer(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case 'GET_CONVERSATIONS/fulfilled':\n      return {\n        ...state,\n        conversations: payload,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default conversationsReducer;\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { getConversations } from '../store/conversations';\n\nconst SelectConversation = () => {\n  const dispatch = useDispatch();\n  let conversations = useSelector((state) => state.conversations.conversations);\n  // Above does not return a true array, below converts data to an array with the map method available to it\n  conversations = [...conversations];\n\n  useEffect(() => {\n    dispatch(getConversations());\n  }, []);\n\n  function renderConversations() {\n    console.log(conversations);\n\n    return conversations.map((convo) => (\n      <li key={convo._id} id={convo._id}>\n        <Link to={`/testimony/${convo._id}`}>{convo.name}</Link>\n      </li>\n    ));\n  }\n\n  return (\n    <div>\n      <Link to=\"/inventory\">Inventory</Link>\n      <Link to=\"/testimony\">Blank Testimony</Link>\n      <h1>UGLY SELECT SCREEN 🦝🏝</h1>\n      <ul>{renderConversations()}</ul>\n    </div>\n  );\n};\n\nexport default SelectConversation;\n","import { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport dialogueReducer from './dialogue';\nimport conversationsReducer from './conversations';\nimport inventoryReducer from './inventory';\n\nconst reducer = combineReducers({\n  dialogue: dialogueReducer,\n  conversations: conversationsReducer,\n  inventory: inventoryReducer,\n});\n\nconst store = configureStore({ reducer });\n\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Testimony from './pages/Testimony';\nimport SelectConversation from './pages/SelectConversation';\nimport Inventory from './components/Inventory';\nimport store from './store/store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route path=\"/inventory\">\n            <Inventory />\n          </Route>\n          <Route\n            path=\"/testimony/:id\"\n            render={(props) => <Testimony match={props.match} />}\n          ></Route>\n          <Route path=\"/\">\n            <SelectConversation />\n          </Route>\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Testimony from './pages/Testimony';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/normal.0eabf756.png\";","module.exports = __webpack_public_path__ + \"static/media/mad.57935f54.png\";","module.exports = __webpack_public_path__ + \"static/media/laugh.43943291.png\";","module.exports = __webpack_public_path__ + \"static/media/sad.e0af5c11.png\";","module.exports = __webpack_public_path__ + \"static/media/sleep.9e152b90.png\";"],"sourceRoot":""}